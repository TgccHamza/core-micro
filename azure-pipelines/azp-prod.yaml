trigger:
  branches:
    include:
      - master

pool:
  vmImage: ubuntu-latest

variables:
  imageName: "gamicore"
  imageTag: "$(Build.BuildId)"
  acrUrl: "tg2cproduction.azurecr.io"

stages:
  - stage: Build
    jobs:
      - job: BuildAndPush
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
                sudo apt-get install rpm
                wget 'https://github.com/aquasecurity/trivy/releases/download/v0.57.1/trivy_0.57.1_Linux-64bit.deb'
                sudo dpkg -i 'trivy_0.57.1_Linux-64bit.deb'
                trivy -v
            displayName: 'Install Trivy'
          
          - script: |
                echo "Scanning the local filesystem with Trivy"
                trivy fs --exit-code 1 --severity HIGH,CRITICAL --scanners vuln,secret,misconfig ./
            displayName: 'Run Trivy Filesystem Scan'
            continueOnError: true
          
          - task: Docker@2
            displayName: Build & Push to ACR
            inputs:
              containerRegistry: "tg2cproduction"
              repository: "$(imageName)"
              command: "buildAndPush"
              Dockerfile: "**/Dockerfile"
              tags: |
                $(imageTag)
                latest

          - script: |
                echo "Scanning the built Docker image with Trivy"
                trivy image --exit-code 1 --severity HIGH,CRITICAL $(acrUrl)/$(imageName):$(imageTag)
            displayName: 'Run Trivy Image Scan'
            continueOnError: true

          - script: |
                echo "Generating Trivy JSON Report"
                trivy image --format json --output trivy-result.json $(acrUrl)/$(imageName):$(imageTag)

          - publish: $(System.DefaultWorkingDirectory)/trivy-result.json
            artifact: TrivyScanResults

  - stage: Deploy
    jobs:
      - deployment: DeployToAKS
        pool:
          vmImage: "ubuntu-latest"
        environment: "production"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Image name: $(imageName)"
                    echo "Image tag: $(imageTag)"
                  displayName: "Debug image variables"

                - checkout: self
                  displayName: "Checkout"

                - task: replacetokens@6
                  inputs:
                    sources: "$(Pipeline.Workspace)/s/k8s/deployment-prod.yaml"
                    tokenPattern: "azpipelines"
                    logLevel: "debug"
                    ifNoFilesFound: "warn"

                - task: KubernetesManifest@1
                  inputs:
                    action: "deploy"
                    connectionType: "kubernetesServiceConnection"
                    kubernetesServiceConnection: "production-k8s-production-gamitool-back-1733252464926"
                    namespace: "gamitool-back"
                    manifests: "$(Pipeline.Workspace)/s/k8s/deployment-prod.yaml"
                    containers: "$(acrUrl)/$(imageName):$(imageTag)"